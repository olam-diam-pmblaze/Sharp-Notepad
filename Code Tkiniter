import tkinter as tk
import webbrowser
from tkinter.filedialog import asksaveasfilename, askopenfilename
from tkinter import messagebox
from tkinter import *
from datetime import datetime
from tkinter import font
from tkinter import colorchooser

# Syncs time
now = datetime.now()

# Prints date and time
def time_insert():
    current_time = now.strftime("%A - %B %d, %Y - %r")
    text_edit.insert(tk.END, current_time)

# Prevent close window.
def disable_event():
    exit_app()

# exiting app
def cmd1():
    result = tk.messagebox.askyesno("SharpNotepad", "Exit?")
    if result is True:
        command = root.destroy()
    elif result is False:
        return

# Save the file
def saving_file():
    file_location = asksaveasfilename(
        defaultextension="txt",
        filetypes=[("Text file", "*.txt"), ("Rich Text File", "*.rtf"), ["All files", "*.*"]])
    if not file_location:
        return
    with open(file_location, "w") as file_output:
        text = text_edit.get(1.0, tk.END)
        file_output.write(text)
    root.title(f"Sharp Notepad v2.1 - {file_location}")

# Opens a file
def opening_file():
    file_location = askopenfilename(
        filetypes=[("Text file", "*.txt"), ("Rich Text File", "*.rtf"), ("All files", "*.*")])
    if not file_location:
        return
    text_edit.delete(1.0, tk.END)
    with open(file_location, "r") as file_input:
        text = file_input.read()
        text_edit.insert(tk.END, text)
    root.title(f"Sharp Notepad v2.1 - {file_location}")

# Message box about app's information
def about_app():
    window = tk.Tk()
    window.eval("tk::PlaceWindow %s center" % window.winfo_toplevel())
    window.withdraw()

    messagebox.showinfo("About Sharp Notepad", "Version 2.1 (Released by olam-diam-pumblaze in Github 2023)")

    window.destroy()

# Confirmation to close the app
def exit_app():
    result = tk.messagebox.askyesnocancel("Sharp Notepad", "Do you want to save your changes? If you already saved it "
                                                          "click No.")
    if result is True:
        command=saving_file()
        command=cmd1()
    elif result is False:
        command=root.destroy()
    else:
        return

# Go to the GitHub webpage
def help_page():
    webbrowser.open_new_tab("https://github.com/olam-diam-pmblaze/Sharp-Notepad")

# Cuts the text selected
def cut():
    global text_edit
    text_edit.event_generate("<<Cut>>")

# Copies the text selected
def copy():
    global text_edit
    text_edit.event_generate("<<Copy>>")

# Paste the text selected
def paste():
    global text_edit
    text_edit.event_generate("<<Paste>>")

# Select all
def select_all():
    text_edit.tag_add('sel', '1.0', 'end')

# Clears all text
def clear_all():
    text_edit.delete(1.0, END)

# Light Mode
def bg_white():
    text_edit.config(background='white', foreground='black')
    root.config(background='white')
    toolbar_frame.config(background='#F0F0F0')
    bold_button.config(background='#F0F0F0', foreground='black', activebackground='#F0F0F0', activeforeground='black')
    italic_button.config(background='#F0F0F0', foreground='black', activebackground='#F0F0F0', activeforeground='black')
    redo_button.config(background='#F0F0F0', foreground='black', activebackground='#F0F0F0', activeforeground='black')
    undo_button.config(background='#F0F0F0', foreground='black', activebackground='#F0F0F0', activeforeground='black')

# Dark Mode
def bg_dark():
    if (dark.get()=='Enable'):
        text_edit.config(background='#272727', foreground='white')
        root.config(background='#272727')
        toolbar_frame.config(background='#272727')
        bold_button.config(background='#272727', foreground='white', activebackground='black', activeforeground='white')
        italic_button.config(background='#272727', foreground='white', activebackground='black', activeforeground='white')
        redo_button.config(background='#272727', foreground='white', activebackground='black', activeforeground='white')
        undo_button.config(background='#272727', foreground='white', activebackground='black', activeforeground='white')
    else:
        bg_white()

# Custom Mode Foreground
def custom_color1():
    my_color = colorchooser.askcolor()[1]
    if my_color:
        dark.set('Disable')
        text_edit.config(foreground=my_color)
        undo_button.config(foreground=my_color)
        redo_button.config(foreground=my_color)
        bold_button.config(foreground=my_color)
        italic_button.config(foreground=my_color)

# Custom Mode Background
def custom_color2():
    my_color = colorchooser.askcolor()[1]
    if my_color:
        dark.set('Disable')
        text_edit.config(background=my_color)
        toolbar_frame.config(background=my_color)
        bold_button.config(background=my_color)
        italic_button.config(background=my_color)
        undo_button.config(background=my_color)
        redo_button.config(background=my_color)

# Create bold
def bold_action():
    bold_font = font.Font(text_edit, text_edit.cget("font"))
    bold_font.configure(weight='bold')
    text_edit.tag_configure("bold", font=bold_font)
    current_tags = text_edit.tag_names("sel.first")
    if "bold" in current_tags:
        text_edit.tag_remove("bold", "sel.first", "sel.last")
    else:
        text_edit.tag_add("bold", "sel.first", "sel.last")

# Create italic
def italic_action():
    italic_font = font.Font(text_edit, text_edit.cget("font"))
    italic_font.configure(slant='italic')
    text_edit.tag_configure("italic", font=italic_font)
    current_tags = text_edit.tag_names("sel.first")
    if "bold" in current_tags:
        text_edit.tag_remove("italic", "sel.first", "sel.last")
    else:
        text_edit.tag_add("italic", "sel.first", "sel.last")

# Create Window
root = tk.Tk()
root.title("Sharp Notepad v2.1")
root.geometry("725x475")
root.iconbitmap("C:\GUI\icon.ico")
root.protocol("WM_DELETE_WINDOW", disable_event)
root.config(padx=5, pady=5)

# Variable
dark = StringVar()
# Set
dark.set('Disable')

# Create toolbar frame
toolbar_frame = Frame(root)
toolbar_frame.pack(fill=X)

# Scrollbar
scrollerY = Scrollbar(root)
scrollerY.pack(side=RIGHT, fill=Y)

# Horizontal Scrollbar
scrollerX = Scrollbar(root, orient='horizontal')
scrollerX.pack(side=BOTTOM, fill=X)

# Text Editor
text_edit = tk.Text(root, font=("arial", 18), undo=True, yscrollcommand=scrollerY.set, wrap="none", xscrollcommand=scrollerX.set)

# Configure Scroller to Text Editor
scrollerY.config(command=text_edit.yview)
scrollerX.config(command=text_edit.xview)
text_edit.pack(fill=BOTH)

# Top menu bar
menubar = Menu(root)
root.config(menu=menubar)

# Menu bar selection
file_menu = Menu(menubar, tearoff=0)
file_menu.add_cascade(label="Open File...", command=opening_file)
file_menu.add_cascade(label="Save as...", command=saving_file)
file_menu.add_separator()
file_menu.add_command(label="Exit", command=exit_app, accelerator="Alt+F4", activebackground='#C42B1C', activeforeground='white')
menubar.add_cascade(label="File", menu=file_menu)

edit_menu = Menu(menubar, tearoff=0)
edit_menu.add_command(label="Cut", command=cut, accelerator="Ctrl+X")
edit_menu.add_command(label="Copy", command=copy, accelerator="Ctrl+C")
edit_menu.add_command(label="Paste", command=paste, accelerator="Ctrl+V")
edit_menu.add_separator()
edit_menu.add_command(label="Redo", command=text_edit.edit_redo, accelerator="Ctrl+Y")
edit_menu.add_command(label="Undo", command=text_edit.edit_undo, accelerator="Ctrl+Z")
edit_menu.add_separator()
edit_menu.add_command(label="Select All", command=select_all, accelerator="Ctrl+A")
edit_menu.add_cascade(label="Clear All", command=clear_all)
edit_menu.add_separator()
edit_menu.add_cascade(label="Insert date and time", command=time_insert)
menubar.add_cascade(label="Edit", menu=edit_menu)

appearance_menu = Menu(menubar, tearoff=0)
appearance_menu.add_checkbutton(label="Dark Mode", variable=dark, onvalue='Enable', offvalue='Disable', command=bg_dark)
appearance_menu.submenu = Menu(appearance_menu, tearoff=0)
appearance_menu.submenu.add_cascade(label="Background", command=custom_color2)
appearance_menu.submenu.add_cascade(label="Text and Foreground", command=custom_color1)
appearance_menu.add_cascade(label="Custom App Color", menu=appearance_menu.submenu)

menubar.add_cascade(label="View", menu=appearance_menu)

help_menu = Menu(menubar, tearoff=0)
help_menu.add_cascade(label="About", command=about_app, activebackground='yellow', activeforeground='black')
help_menu.add_cascade(label="Github Webpage", command=help_page, activebackground='#3d3d3d', activeforeground='white')
menubar.add_cascade(label="Help", menu=help_menu)

# Create button from Frame
# Bold button
bold_button = Button(toolbar_frame, text="Bold", command=bold_action, foreground='black', activeforeground='black')
bold_button.grid(row=0, column=0, sticky=W, padx=5)
# Italic Button
italic_button = Button(toolbar_frame, text="Italic", command=italic_action, foreground='black', activeforeground='black')
italic_button.grid(row=0, column=1, sticky=W)

# Undo/Redo Buttons
undo_button = Button(toolbar_frame, text="Undo", command=text_edit.edit_undo)
undo_button.grid(row=0, column=2, sticky=W, padx=5)
redo_button = Button(toolbar_frame, text="Redo", command=text_edit.edit_redo)
redo_button.grid(row=0, column=3, sticky=W)

# Repeat the processes
root.mainloop()
