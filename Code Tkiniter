import tkinter as tk
import webbrowser
from tkinter.filedialog import asksaveasfilename, askopenfilename
from tkinter import messagebox
from tkinter import *
from datetime import datetime

#  Syncs time
now = datetime.now()

# Prints date and time
def time_insert():
    current_time = now.strftime("%B %d, %Y at %H:%M:%S")
    text_edit.insert(tk.END, current_time)

# Prevent close window.
def disable_event():
    command=exit_app()

# exiting app
def cmd1():
    result = tk.messagebox.askyesno("SharpNotepad",
                                          "Exit?")
    if result is True:
        command = root.destroy()
    elif result is False:
        return

# Save the file
def saving_file():
    file_location = asksaveasfilename(
        defaultextension="txt",
        filetypes=[("Text file","*.txt"),("Rich Text File","*.rtf"), ["All files","*.*"]])
    if not file_location:
        return
    with open(file_location,"w") as file_output:
        text = text_edit.get(1.0, tk.END)
        file_output.write(text)
    root.title(f"SharpNotepad - {file_location}")

# Opens a file
def opening_file():
    file_location = askopenfilename(
        filetypes=[("Text file","*.txt"),("Rich Text File","*.rtf"), ("All files","*.*")])
    if not file_location:
        return
    text_edit.delete(1.0, tk.END)
    with open(file_location, "r") as file_input:
        text = file_input.read()
        text_edit.insert(tk.END, text)
    root.title(f"SharpNotepad - {file_location}")

# Message box about app's information
def about_app():
    window = tk.Tk()
    window.eval("tk::PlaceWindow %s center" % window.winfo_toplevel())
    window.withdraw()

    messagebox.showinfo("About SharpNotepad", "Version 2.0 (Released by olam-diam-pumblaze in Github 2023)")

    window.destroy()

# Confirmation to close the app
def exit_app():
    result = tk.messagebox.askyesnocancel("SharpNotepad", "Do you want to save your changes? If you already saved it or empty click No.")
    if result is True:
        command=saving_file()
        command=cmd1()
    elif result is False:
        command=root.destroy()
    else:
        return

# Go to the GitHub webpage
def help_page():
    webbrowser.open_new_tab("https://github.com/olam-diam-pmblaze/Sharp-Notepad")

# Cuts the text selected
def cut():
    global text_edit
    text_edit.event_generate("<<Cut>>")

# Copies the text selected
def copy():
    global text_edit
    text_edit.event_generate("<<Copy>>")

# Paste the text selected
def paste():
    global text_edit
    text_edit.event_generate("<<Paste>>")

# Select all
def select_all():
    text_edit.tag_add('sel', '1.0', 'end')

# Clears all text
def clear_all():
    text_edit.delete(1.0, END)

# Window
root = tk.Tk()
root.title("SharpNotepad v2.0")
root.geometry("725x475")
root.protocol("WM_DELETE_WINDOW", disable_event)

# Text editor with scrollbar
scroller = Scrollbar(root)
scroller.pack(side=RIGHT, fill=Y)

text_edit = tk.Text(root, font=("arial", 18), undo=True, yscrollcommand=scroller.set)

scroller.config(command=text_edit.yview)
text_edit.pack(expand=1, fill=BOTH)

# Top menu bar
menubar = Menu(root)
root.config(menu=menubar)

# Menu bar selection
file_menu = Menu(menubar, tearoff=0)
file_menu.add_cascade(label="Open File...", command=opening_file)
file_menu.add_cascade(label="Save as...", command=saving_file)
file_menu.add_separator()
file_menu.add_command(label="Exit", command=exit_app, accelerator="Alt+F4", activebackground='#C42B1C', activeforeground='white')
menubar.add_cascade(label="File", menu=file_menu)

edit_menu = Menu(menubar, tearoff=0)
edit_menu.add_command(label="Cut", command=cut, accelerator="Ctrl+X")
edit_menu.add_command(label="Copy", command=copy, accelerator="Ctrl+C")
edit_menu.add_command(label="Paste", command=paste, accelerator="Ctrl+V")
edit_menu.add_separator()
edit_menu.add_command(label="Redo", command=text_edit.edit_redo, accelerator="Ctrl+Y")
edit_menu.add_command(label="Undo", command=text_edit.edit_undo, accelerator="Ctrl+Z")
edit_menu.add_separator()
edit_menu.add_command(label="Select All", command=select_all, accelerator="Ctrl+A")
edit_menu.add_cascade(label="Clear All", command=clear_all)
edit_menu.add_separator()
edit_menu.add_cascade(label="Insert date and time", command=time_insert)
menubar.add_cascade(label="Edit", menu=edit_menu)

help_menu = Menu(menubar, tearoff=0)
help_menu.add_cascade(label="About", command=about_app, activebackground='yellow', activeforeground='black')
help_menu.add_cascade(label="Github Webpage", command=help_page, activebackground='#3d3d3d', activeforeground='white')
menubar.add_cascade(label="Help", menu=help_menu)

# Repeat the processes
root.mainloop()
